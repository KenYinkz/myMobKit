// This file was generated by PermissionsDispatcher. Do not modify!
package com.mymobkit.ui.fragment;

import android.content.Intent;
import android.net.Uri;
import android.provider.Settings;
import java.lang.Override;
import java.lang.String;
import java.lang.ref.WeakReference;
import permissions.dispatcher.PermissionRequest;
import permissions.dispatcher.PermissionUtils;
import permissions.dispatcher.v13.PermissionUtilsV13;

final class ServiceSettingsFragmentPermissionsDispatcher {
  private static final int REQUEST_REQUESTFORSYSTEMALERTWINDOWPERMISSION = 0;

  private static final String[] PERMISSION_REQUESTFORSYSTEMALERTWINDOWPERMISSION = new String[] {"android.permission.SYSTEM_ALERT_WINDOW"};

  private static final int REQUEST_REQUESTFORCAMERAPERMISSION = 1;

  private static final String[] PERMISSION_REQUESTFORCAMERAPERMISSION = new String[] {"android.permission.CAMERA"};

  private static final int REQUEST_REQUESTFORCONTACTPERMISSION = 2;

  private static final String[] PERMISSION_REQUESTFORCONTACTPERMISSION = new String[] {"android.permission.READ_CONTACTS","android.permission.WRITE_CONTACTS"};

  private static final int REQUEST_REQUESTFORAUDIOPERMISSION = 3;

  private static final String[] PERMISSION_REQUESTFORAUDIOPERMISSION = new String[] {"android.permission.RECORD_AUDIO","android.permission.MODIFY_AUDIO_SETTINGS"};

  private static final int REQUEST_REQUESTFORLOCATIONPERMISSION = 4;

  private static final String[] PERMISSION_REQUESTFORLOCATIONPERMISSION = new String[] {"android.permission.ACCESS_COARSE_LOCATION","android.permission.ACCESS_FINE_LOCATION"};

  private static final int REQUEST_REQUESTFORCALLPERMISSION = 5;

  private static final String[] PERMISSION_REQUESTFORCALLPERMISSION = new String[] {"android.permission.CALL_PHONE","android.permission.READ_CALL_LOG"};

  private static final int REQUEST_REQUESTFORSMSPERMISSION = 6;

  private static final String[] PERMISSION_REQUESTFORSMSPERMISSION = new String[] {"android.permission.SEND_SMS","android.permission.RECEIVE_SMS"};

  private static final int REQUEST_REQUESTFORSTORAGEPERMISSION = 7;

  private static final String[] PERMISSION_REQUESTFORSTORAGEPERMISSION = new String[] {"android.permission.WRITE_EXTERNAL_STORAGE"};

  private ServiceSettingsFragmentPermissionsDispatcher() {
  }

  static void requestForSystemAlertWindowPermissionWithCheck(ServiceSettingsFragment target) {
    if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_REQUESTFORSYSTEMALERTWINDOWPERMISSION) || Settings.canDrawOverlays(target.getActivity())) {
      target.requestForSystemAlertWindowPermission();
    } else {
      if (PermissionUtilsV13.getInstance().shouldShowRequestPermissionRationale(target, PERMISSION_REQUESTFORSYSTEMALERTWINDOWPERMISSION)) {
        target.showSystemAlertWindowPermissionRationale(new RequestForSystemAlertWindowPermissionPermissionRequest(target));
      } else {
        Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse("package:" + target.getActivity().getPackageName()));
        target.getActivity().startActivityForResult(intent, REQUEST_REQUESTFORSYSTEMALERTWINDOWPERMISSION);
      }
    }
  }

  static void requestForCameraPermissionWithCheck(ServiceSettingsFragment target) {
    if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_REQUESTFORCAMERAPERMISSION)) {
      target.requestForCameraPermission();
    } else {
      if (PermissionUtilsV13.getInstance().shouldShowRequestPermissionRationale(target, PERMISSION_REQUESTFORCAMERAPERMISSION)) {
        target.showCameraPermissionRationale(new RequestForCameraPermissionPermissionRequest(target));
      } else {
        PermissionUtilsV13.getInstance().requestPermissions(target, PERMISSION_REQUESTFORCAMERAPERMISSION, REQUEST_REQUESTFORCAMERAPERMISSION);
      }
    }
  }

  static void requestForContactPermissionWithCheck(ServiceSettingsFragment target) {
    if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_REQUESTFORCONTACTPERMISSION)) {
      target.requestForContactPermission();
    } else {
      if (PermissionUtilsV13.getInstance().shouldShowRequestPermissionRationale(target, PERMISSION_REQUESTFORCONTACTPERMISSION)) {
        target.showContactPermissionRationale(new RequestForContactPermissionPermissionRequest(target));
      } else {
        PermissionUtilsV13.getInstance().requestPermissions(target, PERMISSION_REQUESTFORCONTACTPERMISSION, REQUEST_REQUESTFORCONTACTPERMISSION);
      }
    }
  }

  static void requestForAudioPermissionWithCheck(ServiceSettingsFragment target) {
    if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_REQUESTFORAUDIOPERMISSION)) {
      target.requestForAudioPermission();
    } else {
      if (PermissionUtilsV13.getInstance().shouldShowRequestPermissionRationale(target, PERMISSION_REQUESTFORAUDIOPERMISSION)) {
        target.showAudioPermissionRationale(new RequestForAudioPermissionPermissionRequest(target));
      } else {
        PermissionUtilsV13.getInstance().requestPermissions(target, PERMISSION_REQUESTFORAUDIOPERMISSION, REQUEST_REQUESTFORAUDIOPERMISSION);
      }
    }
  }

  static void requestForLocationPermissionWithCheck(ServiceSettingsFragment target) {
    if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_REQUESTFORLOCATIONPERMISSION)) {
      target.requestForLocationPermission();
    } else {
      if (PermissionUtilsV13.getInstance().shouldShowRequestPermissionRationale(target, PERMISSION_REQUESTFORLOCATIONPERMISSION)) {
        target.showLocationPermissionRationale(new RequestForLocationPermissionPermissionRequest(target));
      } else {
        PermissionUtilsV13.getInstance().requestPermissions(target, PERMISSION_REQUESTFORLOCATIONPERMISSION, REQUEST_REQUESTFORLOCATIONPERMISSION);
      }
    }
  }

  static void requestForCallPermissionWithCheck(ServiceSettingsFragment target) {
    if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_REQUESTFORCALLPERMISSION)) {
      target.requestForCallPermission();
    } else {
      if (PermissionUtilsV13.getInstance().shouldShowRequestPermissionRationale(target, PERMISSION_REQUESTFORCALLPERMISSION)) {
        target.showCallPermissionRationale(new RequestForCallPermissionPermissionRequest(target));
      } else {
        PermissionUtilsV13.getInstance().requestPermissions(target, PERMISSION_REQUESTFORCALLPERMISSION, REQUEST_REQUESTFORCALLPERMISSION);
      }
    }
  }

  static void requestForSmsPermissionWithCheck(ServiceSettingsFragment target) {
    if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_REQUESTFORSMSPERMISSION)) {
      target.requestForSmsPermission();
    } else {
      if (PermissionUtilsV13.getInstance().shouldShowRequestPermissionRationale(target, PERMISSION_REQUESTFORSMSPERMISSION)) {
        target.showSmsPermissionRationale(new RequestForSmsPermissionPermissionRequest(target));
      } else {
        PermissionUtilsV13.getInstance().requestPermissions(target, PERMISSION_REQUESTFORSMSPERMISSION, REQUEST_REQUESTFORSMSPERMISSION);
      }
    }
  }

  static void requestForStoragePermissionWithCheck(ServiceSettingsFragment target) {
    if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_REQUESTFORSTORAGEPERMISSION)) {
      target.requestForStoragePermission();
    } else {
      if (PermissionUtilsV13.getInstance().shouldShowRequestPermissionRationale(target, PERMISSION_REQUESTFORSTORAGEPERMISSION)) {
        target.showStoragePermissionRationale(new RequestForStoragePermissionPermissionRequest(target));
      } else {
        PermissionUtilsV13.getInstance().requestPermissions(target, PERMISSION_REQUESTFORSTORAGEPERMISSION, REQUEST_REQUESTFORSTORAGEPERMISSION);
      }
    }
  }

  static void onRequestPermissionsResult(ServiceSettingsFragment target, int requestCode, int[] grantResults) {
    switch (requestCode) {
      case REQUEST_REQUESTFORCAMERAPERMISSION:
      if (PermissionUtils.getTargetSdkVersion(target.getActivity()) < 23 && !PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_REQUESTFORCAMERAPERMISSION)) {
        target.onCameraPermissionDenied();
        return;
      }
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.requestForCameraPermission();
      } else {
        if (!PermissionUtilsV13.getInstance().shouldShowRequestPermissionRationale(target, PERMISSION_REQUESTFORCAMERAPERMISSION)) {
          target.onCameraPermissionNeverAskAgain();
        } else {
          target.onCameraPermissionDenied();
        }
      }
      break;
      case REQUEST_REQUESTFORCONTACTPERMISSION:
      if (PermissionUtils.getTargetSdkVersion(target.getActivity()) < 23 && !PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_REQUESTFORCONTACTPERMISSION)) {
        target.onContactPermissionDenied();
        return;
      }
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.requestForContactPermission();
      } else {
        if (!PermissionUtilsV13.getInstance().shouldShowRequestPermissionRationale(target, PERMISSION_REQUESTFORCONTACTPERMISSION)) {
          target.onContactPermissionNeverAskAgain();
        } else {
          target.onContactPermissionDenied();
        }
      }
      break;
      case REQUEST_REQUESTFORAUDIOPERMISSION:
      if (PermissionUtils.getTargetSdkVersion(target.getActivity()) < 23 && !PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_REQUESTFORAUDIOPERMISSION)) {
        target.onAudioPermissionDenied();
        return;
      }
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.requestForAudioPermission();
      } else {
        if (!PermissionUtilsV13.getInstance().shouldShowRequestPermissionRationale(target, PERMISSION_REQUESTFORAUDIOPERMISSION)) {
          target.onAudioPermissionNeverAskAgain();
        } else {
          target.onAudioPermissionDenied();
        }
      }
      break;
      case REQUEST_REQUESTFORLOCATIONPERMISSION:
      if (PermissionUtils.getTargetSdkVersion(target.getActivity()) < 23 && !PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_REQUESTFORLOCATIONPERMISSION)) {
        target.onLocationPermissionDenied();
        return;
      }
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.requestForLocationPermission();
      } else {
        if (!PermissionUtilsV13.getInstance().shouldShowRequestPermissionRationale(target, PERMISSION_REQUESTFORLOCATIONPERMISSION)) {
          target.onLocationPermissionNeverAskAgain();
        } else {
          target.onLocationPermissionDenied();
        }
      }
      break;
      case REQUEST_REQUESTFORCALLPERMISSION:
      if (PermissionUtils.getTargetSdkVersion(target.getActivity()) < 23 && !PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_REQUESTFORCALLPERMISSION)) {
        target.onCallPermissionDenied();
        return;
      }
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.requestForCallPermission();
      } else {
        if (!PermissionUtilsV13.getInstance().shouldShowRequestPermissionRationale(target, PERMISSION_REQUESTFORCALLPERMISSION)) {
          target.onCallPermissionNeverAskAgain();
        } else {
          target.onCallPermissionDenied();
        }
      }
      break;
      case REQUEST_REQUESTFORSMSPERMISSION:
      if (PermissionUtils.getTargetSdkVersion(target.getActivity()) < 23 && !PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_REQUESTFORSMSPERMISSION)) {
        target.onSmsPermissionDenied();
        return;
      }
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.requestForSmsPermission();
      } else {
        if (!PermissionUtilsV13.getInstance().shouldShowRequestPermissionRationale(target, PERMISSION_REQUESTFORSMSPERMISSION)) {
          target.onSmsPermissionNeverAskAgain();
        } else {
          target.onSmsPermissionDenied();
        }
      }
      break;
      case REQUEST_REQUESTFORSTORAGEPERMISSION:
      if (PermissionUtils.getTargetSdkVersion(target.getActivity()) < 23 && !PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_REQUESTFORSTORAGEPERMISSION)) {
        target.onStoragePermissionDenied();
        return;
      }
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.requestForStoragePermission();
      } else {
        if (!PermissionUtilsV13.getInstance().shouldShowRequestPermissionRationale(target, PERMISSION_REQUESTFORSTORAGEPERMISSION)) {
          target.onStoragePermissionNeverAskAgain();
        } else {
          target.onStoragePermissionDenied();
        }
      }
      break;
      default:
      break;
    }
  }

  static void onActivityResult(ServiceSettingsFragment target, int requestCode) {
    switch (requestCode) {
      case REQUEST_REQUESTFORSYSTEMALERTWINDOWPERMISSION:
      if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_REQUESTFORSYSTEMALERTWINDOWPERMISSION) || Settings.canDrawOverlays(target.getActivity())) {
        target.requestForSystemAlertWindowPermission();
      } else {
        if (!PermissionUtilsV13.getInstance().shouldShowRequestPermissionRationale(target, PERMISSION_REQUESTFORSYSTEMALERTWINDOWPERMISSION)) {
          target.onSystemAlertWindowPermissionNeverAskAgain();
        } else {
          target.onSystemAlertWindowPermissionDenied();
        }
      }
      break;
      default:
      break;
    }
  }

  private static final class RequestForSystemAlertWindowPermissionPermissionRequest implements PermissionRequest {
    private final WeakReference<ServiceSettingsFragment> weakTarget;

    private RequestForSystemAlertWindowPermissionPermissionRequest(ServiceSettingsFragment target) {
      this.weakTarget = new WeakReference<>(target);
    }

    @Override
    public void proceed() {
      ServiceSettingsFragment target = weakTarget.get();
      if (target == null) return;
      Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse("package:" + target.getActivity().getPackageName()));
      target.getActivity().startActivityForResult(intent, REQUEST_REQUESTFORSYSTEMALERTWINDOWPERMISSION);
    }

    @Override
    public void cancel() {
      ServiceSettingsFragment target = weakTarget.get();
      if (target == null) return;
      target.onSystemAlertWindowPermissionDenied();
    }
  }

  private static final class RequestForCameraPermissionPermissionRequest implements PermissionRequest {
    private final WeakReference<ServiceSettingsFragment> weakTarget;

    private RequestForCameraPermissionPermissionRequest(ServiceSettingsFragment target) {
      this.weakTarget = new WeakReference<>(target);
    }

    @Override
    public void proceed() {
      ServiceSettingsFragment target = weakTarget.get();
      if (target == null) return;
      PermissionUtilsV13.getInstance().requestPermissions(target, PERMISSION_REQUESTFORCAMERAPERMISSION, REQUEST_REQUESTFORCAMERAPERMISSION);
    }

    @Override
    public void cancel() {
      ServiceSettingsFragment target = weakTarget.get();
      if (target == null) return;
      target.onCameraPermissionDenied();
    }
  }

  private static final class RequestForContactPermissionPermissionRequest implements PermissionRequest {
    private final WeakReference<ServiceSettingsFragment> weakTarget;

    private RequestForContactPermissionPermissionRequest(ServiceSettingsFragment target) {
      this.weakTarget = new WeakReference<>(target);
    }

    @Override
    public void proceed() {
      ServiceSettingsFragment target = weakTarget.get();
      if (target == null) return;
      PermissionUtilsV13.getInstance().requestPermissions(target, PERMISSION_REQUESTFORCONTACTPERMISSION, REQUEST_REQUESTFORCONTACTPERMISSION);
    }

    @Override
    public void cancel() {
      ServiceSettingsFragment target = weakTarget.get();
      if (target == null) return;
      target.onContactPermissionDenied();
    }
  }

  private static final class RequestForAudioPermissionPermissionRequest implements PermissionRequest {
    private final WeakReference<ServiceSettingsFragment> weakTarget;

    private RequestForAudioPermissionPermissionRequest(ServiceSettingsFragment target) {
      this.weakTarget = new WeakReference<>(target);
    }

    @Override
    public void proceed() {
      ServiceSettingsFragment target = weakTarget.get();
      if (target == null) return;
      PermissionUtilsV13.getInstance().requestPermissions(target, PERMISSION_REQUESTFORAUDIOPERMISSION, REQUEST_REQUESTFORAUDIOPERMISSION);
    }

    @Override
    public void cancel() {
      ServiceSettingsFragment target = weakTarget.get();
      if (target == null) return;
      target.onAudioPermissionDenied();
    }
  }

  private static final class RequestForLocationPermissionPermissionRequest implements PermissionRequest {
    private final WeakReference<ServiceSettingsFragment> weakTarget;

    private RequestForLocationPermissionPermissionRequest(ServiceSettingsFragment target) {
      this.weakTarget = new WeakReference<>(target);
    }

    @Override
    public void proceed() {
      ServiceSettingsFragment target = weakTarget.get();
      if (target == null) return;
      PermissionUtilsV13.getInstance().requestPermissions(target, PERMISSION_REQUESTFORLOCATIONPERMISSION, REQUEST_REQUESTFORLOCATIONPERMISSION);
    }

    @Override
    public void cancel() {
      ServiceSettingsFragment target = weakTarget.get();
      if (target == null) return;
      target.onLocationPermissionDenied();
    }
  }

  private static final class RequestForCallPermissionPermissionRequest implements PermissionRequest {
    private final WeakReference<ServiceSettingsFragment> weakTarget;

    private RequestForCallPermissionPermissionRequest(ServiceSettingsFragment target) {
      this.weakTarget = new WeakReference<>(target);
    }

    @Override
    public void proceed() {
      ServiceSettingsFragment target = weakTarget.get();
      if (target == null) return;
      PermissionUtilsV13.getInstance().requestPermissions(target, PERMISSION_REQUESTFORCALLPERMISSION, REQUEST_REQUESTFORCALLPERMISSION);
    }

    @Override
    public void cancel() {
      ServiceSettingsFragment target = weakTarget.get();
      if (target == null) return;
      target.onCallPermissionDenied();
    }
  }

  private static final class RequestForSmsPermissionPermissionRequest implements PermissionRequest {
    private final WeakReference<ServiceSettingsFragment> weakTarget;

    private RequestForSmsPermissionPermissionRequest(ServiceSettingsFragment target) {
      this.weakTarget = new WeakReference<>(target);
    }

    @Override
    public void proceed() {
      ServiceSettingsFragment target = weakTarget.get();
      if (target == null) return;
      PermissionUtilsV13.getInstance().requestPermissions(target, PERMISSION_REQUESTFORSMSPERMISSION, REQUEST_REQUESTFORSMSPERMISSION);
    }

    @Override
    public void cancel() {
      ServiceSettingsFragment target = weakTarget.get();
      if (target == null) return;
      target.onSmsPermissionDenied();
    }
  }

  private static final class RequestForStoragePermissionPermissionRequest implements PermissionRequest {
    private final WeakReference<ServiceSettingsFragment> weakTarget;

    private RequestForStoragePermissionPermissionRequest(ServiceSettingsFragment target) {
      this.weakTarget = new WeakReference<>(target);
    }

    @Override
    public void proceed() {
      ServiceSettingsFragment target = weakTarget.get();
      if (target == null) return;
      PermissionUtilsV13.getInstance().requestPermissions(target, PERMISSION_REQUESTFORSTORAGEPERMISSION, REQUEST_REQUESTFORSTORAGEPERMISSION);
    }

    @Override
    public void cancel() {
      ServiceSettingsFragment target = weakTarget.get();
      if (target == null) return;
      target.onStoragePermissionDenied();
    }
  }
}
